let g:clojure_align_multiline_strings = 0
let g:clojure_align_subforms = 1
let g:clojure_syntax_keywords = {
      \ 'clojureDefine': ['defproject', 'defcomponent', 'deftest'],
      \ 'clojureVariable': ['this'],
      \ 'clojureMacro': [
        \ 'testing',
        \ 'on',
        \ 'are',
        \ 'GET',
        \ 'POST',
        \ 'PUT',
        \ 'DELETE',
        \ 'HEAD',
        \ 'OPTIONS',
        \ 'PATCH',
        \ 'ANY',
      \ ],
      \ 'clojureFunc': [
        \ 'Awake',
        \ 'FixedUpdate',
        \ 'LateUpdate',
        \ 'OnAnimatorIK',
        \ 'OnAnimatorMove',
        \ 'OnApplicationFocus',
        \ 'OnApplicationPause',
        \ 'OnApplicationQuit',
        \ 'OnAudioFilterRead',
        \ 'OnBecameInvisible',
        \ 'OnBecameVisible',
        \ 'OnCollisionEnter',
        \ 'OnCollisionEnter2D',
        \ 'OnCollisionExit',
        \ 'OnCollisionExit2D',
        \ 'OnCollisionStay',
        \ 'OnCollisionStay2D',
        \ 'OnConnectedToServer',
        \ 'OnControllerColliderHit',
        \ 'OnDestroy',
        \ 'OnDisable',
        \ 'OnDisconnectedFromServer',
        \ 'OnDrawGizmos',
        \ 'OnDrawGizmosSelected',
        \ 'OnEnable',
        \ 'OnFailedToConnect',
        \ 'OnFailedToConnectToMasterServer',
        \ 'OnGUI',
        \ 'OnJointBreak',
        \ 'OnLevelWasLoaded',
        \ 'OnMasterServerEvent',
        \ 'OnMouseDown',
        \ 'OnMouseDrag',
        \ 'OnMouseEnter',
        \ 'OnMouseExit',
        \ 'OnMouseOver',
        \ 'OnMouseUp',
        \ 'OnMouseUpAsButton',
        \ 'OnNetworkInstantiate',
        \ 'OnParticleCollision',
        \ 'OnPlayerConnected',
        \ 'OnPlayerDisconnected',
        \ 'OnPostRender',
        \ 'OnPreCull',
        \ 'OnPreRender',
        \ 'OnRenderImage',
        \ 'OnRenderObject',
        \ 'OnSerializeNetworkView',
        \ 'OnServerInitialized',
        \ 'OnTriggerEnter',
        \ 'OnTriggerEnter2D',
        \ 'OnTriggerExit',
        \ 'OnTriggerExit2D',
        \ 'OnTriggerStay',
        \ 'OnTriggerStay2D',
        \ 'OnValidate',
        \ 'OnWillRenderObject',
        \ 'Reset',
        \ 'Start',
        \ 'Update'
      \ ]
      \ }

let g:clojure_fuzzy_indent = 1
let g:clojure_fuzzy_indent_patterns = [
      \ '[',
      \ '^[',
      \ '\[',
      \ '^\[',
      \ '^assoc$',
      \ '^def',
      \ '^do$',
      \ '^finally$',
      \ '^future$',
      \ '^let',
      \ '^try',
      \ '^use-fixtures$',
      \ '^with$',
      \ '^with-out-str$',
      \ '^with-system$',
      \ '^with-system-fixture$',
      \ '^GET$',
      \ '^POST$',
      \ '^PUT$',
      \ '^DELETE$',
      \ '^HEAD$',
      \ '^OPTIONS$',
      \ '^PATCH$',
      \ '^ANY$',
      \ '^Awake$',
      \ '^FixedUpdate$',
      \ '^LateUpdate$',
      \ '^OnAnimatorIK$',
      \ '^OnAnimatorMove$',
      \ '^OnApplicationFocus$',
      \ '^OnApplicationPause$',
      \ '^OnApplicationQuit$',
      \ '^OnAudioFilterRead$',
      \ '^OnBecameInvisible$',
      \ '^OnBecameVisible$',
      \ '^OnCollisionEnter$',
      \ '^OnCollisionEnter2D$',
      \ '^OnCollisionExit$',
      \ '^OnCollisionExit2D$',
      \ '^OnCollisionStay$',
      \ '^OnCollisionStay2D$',
      \ '^OnConnectedToServer$',
      \ '^OnControllerColliderHit$',
      \ '^OnDestroy$',
      \ '^OnDisable$',
      \ '^OnDisconnectedFromServer$',
      \ '^OnDrawGizmos$',
      \ '^OnDrawGizmosSelected$',
      \ '^OnEnable$',
      \ '^OnFailedToConnect$',
      \ '^OnFailedToConnectToMasterServer$',
      \ '^OnGUI$',
      \ '^OnJointBreak$',
      \ '^OnLevelWasLoaded$',
      \ '^OnMasterServerEvent$',
      \ '^OnMouseDown$',
      \ '^OnMouseDrag$',
      \ '^OnMouseEnter$',
      \ '^OnMouseExit$',
      \ '^OnMouseOver$',
      \ '^OnMouseUp$',
      \ '^OnMouseUpAsButton$',
      \ '^OnNetworkInstantiate$',
      \ '^OnParticleCollision$',
      \ '^OnPlayerConnected$',
      \ '^OnPlayerDisconnected$',
      \ '^OnPostRender$',
      \ '^OnPreCull$',
      \ '^OnPreRender$',
      \ '^OnRenderImage$',
      \ '^OnRenderObject$',
      \ '^OnSerializeNetworkView$',
      \ '^OnServerInitialized$',
      \ '^OnTriggerEnter$',
      \ '^OnTriggerEnter2D$',
      \ '^OnTriggerExit$',
      \ '^OnTriggerExit2D$',
      \ '^OnTriggerStay$',
      \ '^OnTriggerStay2D$',
      \ '^OnValidate$',
      \ '^OnWillRenderObject$',
      \ '^Reset$',
      \ '^Start$',
      \ '^Update$'
      \ ]

let g:clojure_maxlines = 0

" syntax match clojureFunc '\v<\.ScreenPointToRay>'
" syntax match clojureFunc '\v<\.-?[a-z][a-zA-Z0-9]*>'
" syntax match clojureFunc '\v(<|\.|/|#?^)([A-Z][a-zA-Z0-9_]*[a-zA-Z0-9$_]+\.?>)'
